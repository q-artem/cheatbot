import time
from asyncio import sleep

import telebot

from telebot import types

bot = telebot.TeleBot('6526631273:AAGSRuAdGfHE14VlDgRSz_ItXLnucj4S9gE')

separator = "[split]"

hiMess = '''                          –î–ò–°*–ö–õ–ï–ô*–ú–ï–†
–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å —Ü–µ–ª—å—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –í–∞—à–∏—Ö —Å–º–∞—Ä—Ç-—á–∞—Å–æ–≤ –∏ —Ñ–∏—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ –∏–Ω—ã—Ö —Ü–µ–ª—è—Ö –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ. –í—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã, –∫–∞–∫ –∏ –Ω–∏–∂–µ—Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç. 

–í –æ–±—â–µ–º, —ç—Ç–æ –º–æ–π –±–æ—Ç –¥–ª—è —Å–ø–∏—Å—ã–≤–∞–Ω–∏—è —Å —á–∞—Å–æ–≤, –≤ —Ü–µ–ª–æ–º –≤—Å—ë –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–æ –µ—Å–ª–∏ –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –º–µ–Ω—è, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–≤–æ–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏. –î—É–º–∞—é, –∫—Ç–æ —Å–¥–µ–ª–∞–ª –±–æ—Ç–∞ –í—ã –∑–Ω–∞–µ—Ç–µ.'''

@bot.message_handler(commands=['start'])
def start(message):

    #btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    #markup.add(btn1)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
    btn1 = types.KeyboardButton('xiaomi wat—Åh 2 white')
    btn2 = types.KeyboardButton('Mi Band 7')
    btn3 = types.KeyboardButton('Amazfit gts 2 mini')
    btn4 = types.KeyboardButton('–ú–æ–µ–≥–æ –±—Ä–∞—Å–ª–µ—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.from_user.id, hiMess, reply_markup=markup, parse_mode='Markdown')
    bot.send_message(message.from_user.id, f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫! –ß—Ç–æ–±—ã –≤—ã–∫–ª—é—á–∏—Ç—å –º–µ–Ω—è, –Ω–∞–ø–∏—à–∏ \"–ó–¥–æ—Ö–Ω–∏\"\n–î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ - /start\n–î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–µ—Å—Ç–µ - {separator}\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –±—Ä–∞—Å–ª–µ—Ç –∏–∑ –º–µ–Ω—é:", reply_markup=markup)

maxLenNotification = dict()
allWatch = {180: 'xiaomi wat—Åh 2 lite', 1023: 'Mi Band 7', 573: 'Amazfit gts 2 mini'}
lst = []        # –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–∏—Ö   # –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–∏—Ö    # –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–∏—Ö
inputs = []

@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    print(message.from_user.id)
    if message.text == "–ó–¥–æ—Ö–Ω–∏":
        bot.send_message(message.from_user.id, '–ù–µ–∞, –≤—Å—ë, –æ—Ç–ª–∞–¥–∫–∞ –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', parse_mode='Markdown')
        return
    if message.text == "–ó–¥–æ—Ö–Ω–∏ 31415926":
        bot.send_message(message.from_user.id, 'Okk', parse_mode='Markdown')
        bot.stop_polling()

    if message.from_user.id not in maxLenNotification.keys():
        maxLenNotification[message.from_user.id] = list(allWatch.keys())[0]

    for q in allWatch.items():
        if message.text == q[-1]:
            maxLenNotification[message.from_user.id] = q[0]
            bot.send_message(message.from_user.id, '–ü—Ä–∏–Ω—è—Ç–æ', parse_mode='Markdown')
            return

    if message.text == '–ú–æ–µ–≥–æ –±—Ä–∞—Å–ª–µ—Ç–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ':
        bot.send_message(message.from_user.id, '–û–π–π, –Ω–µ, –Ω—É –∞ —á–µ–≥–æ —Ç—ã —Ö–æ—Ç–µ–ª, —á—Ç–æ–±—ã –µ—â—ë –∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±—Ä–∞—Å–ª–µ—Ç—ã –¥–æ–±–∞–≤–ª—è—Ç—å? –ú–Ω–µ –∑–∞ —ç—Ç–æ –Ω–µ –ø–ª–∞—Ç—è—Ç', parse_mode='Markdown')
        return

    firstCall = False
    if inputs == []:
        firstCall = True

    inputs.append(message.text)

    if firstCall:
        print(maxLenNotification)
        bot.send_message(message.from_user.id, '–ü—Ä–∏–Ω—è—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—é —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã c –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –±—Ä–∞—Å–ª–µ—Ç ' + allWatch[maxLenNotification[message.from_user.id]], parse_mode='Markdown')
        time.sleep(1.5) # –ø–æ–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∞, –¥–æ—Å—ã–ª–∞—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
        print("Preparing to sending...")
        g = "".join(inputs)
        while len(g) > maxLenNotification[message.from_user.id] or separator in g:
            if separator in g[0:maxLenNotification[message.from_user.id]]:
                ind = g[0:maxLenNotification[message.from_user.id]].find(separator)
                lst.append(g[0:ind])
                g = g[ind + 7:]
            else:
                lst.append(g[0:maxLenNotification[message.from_user.id]])
                g = g[maxLenNotification[message.from_user.id]:]
        lst.append(g)
        while inputs != []:
            inputs.pop(0)

        while len(lst) > 0:
            if lst[0] == "":
                lst.pop(0)
                continue
            time.sleep(3)
            print("Sending", lst[0])
            bot.send_message(message.from_user.id, lst[0])
            lst.pop(0)
        print("Pass")
    else:
        bot.send_message(message.from_user.id, '–î–æ–±–∞–≤–ª–µ–Ω–æ –µ—â—ë –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ', parse_mode='Markdown')

if __name__ == '__main__':
    print("Starting bot...")
    bot.polling(none_stop=True, interval=0) #–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–∞—Å—Ç—å